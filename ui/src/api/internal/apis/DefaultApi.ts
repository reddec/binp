/* tslint:disable */
/* eslint-disable */
/**
 * BINP
 * Internal APIs
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActionInfo,
    ActionInfoFromJSON,
    ActionInfoToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    Headline,
    HeadlineFromJSON,
    HeadlineToJSON,
    InvokeResult,
    InvokeResultFromJSON,
    InvokeResultToJSON,
    Journal,
    JournalFromJSON,
    JournalToJSON,
} from '../models';

export interface GetJournalRequest {
    journalId: number;
}

export interface InvokeActionRequest {
    name: string;
}

export interface ListJournalsRequest {
    page?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get single journal record by ID. If no record found - 404 returned.
     * Get Journal
     */
    async getJournalRaw(requestParameters: GetJournalRequest): Promise<runtime.ApiResponse<Journal>> {
        if (requestParameters.journalId === null || requestParameters.journalId === undefined) {
            throw new runtime.RequiredError('journalId','Required parameter requestParameters.journalId was null or undefined when calling getJournal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/journal/{journal_id}`.replace(`{${"journal_id"}}`, encodeURIComponent(String(requestParameters.journalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JournalFromJSON(jsonValue));
    }

    /**
     * Get single journal record by ID. If no record found - 404 returned.
     * Get Journal
     */
    async getJournal(requestParameters: GetJournalRequest): Promise<Journal> {
        const response = await this.getJournalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Invoke Action
     */
    async invokeActionRaw(requestParameters: InvokeActionRequest): Promise<runtime.ApiResponse<InvokeResult>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling invokeAction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/action/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvokeResultFromJSON(jsonValue));
    }

    /**
     * Invoke Action
     */
    async invokeAction(requestParameters: InvokeActionRequest): Promise<InvokeResult> {
        const response = await this.invokeActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * List Actions
     */
    async listActionsRaw(): Promise<runtime.ApiResponse<Array<ActionInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/actions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActionInfoFromJSON));
    }

    /**
     * List Actions
     */
    async listActions(): Promise<Array<ActionInfo>> {
        const response = await this.listActionsRaw();
        return await response.value();
    }

    /**
     * List journal records in reverse order. Maximum 20 items per page.
     * List Journals
     */
    async listJournalsRaw(requestParameters: ListJournalsRequest): Promise<runtime.ApiResponse<Array<Headline>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/journals/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HeadlineFromJSON));
    }

    /**
     * List journal records in reverse order. Maximum 20 items per page.
     * List Journals
     */
    async listJournals(requestParameters: ListJournalsRequest): Promise<Array<Headline>> {
        const response = await this.listJournalsRaw(requestParameters);
        return await response.value();
    }

}
